// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: cosmos/protocolpool/v1/budget.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	types "github.com/cosmos/cosmos-sdk/types"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// MsgSetBudgetProposal defines a message for setting the budget proposal.
//
// Since: cosmos-sdk 0.50
type MsgSetBudgetProposal struct {
	RecipientAddress  string      `protobuf:"bytes,1,opt,name=recipient_address,json=recipientAddress,proto3" json:"recipient_address,omitempty"`
	TotalBudget       *types.Coin `protobuf:"bytes,2,opt,name=total_budget,json=totalBudget,proto3" json:"total_budget,omitempty"`
	StartTime         int64       `protobuf:"varint,3,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	RemainingTranches int64       `protobuf:"varint,4,opt,name=remaining_tranches,json=remainingTranches,proto3" json:"remaining_tranches,omitempty"`
	Period            int64       `protobuf:"varint,5,opt,name=period,proto3" json:"period,omitempty"`
}

func (m *MsgSetBudgetProposal) Reset()         { *m = MsgSetBudgetProposal{} }
func (m *MsgSetBudgetProposal) String() string { return proto.CompactTextString(m) }
func (*MsgSetBudgetProposal) ProtoMessage()    {}
func (*MsgSetBudgetProposal) Descriptor() ([]byte, []int) {
	return fileDescriptor_2414eab590ecb8a3, []int{0}
}
func (m *MsgSetBudgetProposal) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSetBudgetProposal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSetBudgetProposal.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSetBudgetProposal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSetBudgetProposal.Merge(m, src)
}
func (m *MsgSetBudgetProposal) XXX_Size() int {
	return m.Size()
}
func (m *MsgSetBudgetProposal) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSetBudgetProposal.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSetBudgetProposal proto.InternalMessageInfo

func (m *MsgSetBudgetProposal) GetRecipientAddress() string {
	if m != nil {
		return m.RecipientAddress
	}
	return ""
}

func (m *MsgSetBudgetProposal) GetTotalBudget() *types.Coin {
	if m != nil {
		return m.TotalBudget
	}
	return nil
}

func (m *MsgSetBudgetProposal) GetStartTime() int64 {
	if m != nil {
		return m.StartTime
	}
	return 0
}

func (m *MsgSetBudgetProposal) GetRemainingTranches() int64 {
	if m != nil {
		return m.RemainingTranches
	}
	return 0
}

func (m *MsgSetBudgetProposal) GetPeriod() int64 {
	if m != nil {
		return m.Period
	}
	return 0
}

// MsgSetBudgetProposalResponse defines the response to executing a
// MsgSetBudgetProposal message.
//
// Since: cosmos-sdk 0.50
type MsgSetBudgetProposalResponse struct {
}

func (m *MsgSetBudgetProposalResponse) Reset()         { *m = MsgSetBudgetProposalResponse{} }
func (m *MsgSetBudgetProposalResponse) String() string { return proto.CompactTextString(m) }
func (*MsgSetBudgetProposalResponse) ProtoMessage()    {}
func (*MsgSetBudgetProposalResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2414eab590ecb8a3, []int{1}
}
func (m *MsgSetBudgetProposalResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSetBudgetProposalResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSetBudgetProposalResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSetBudgetProposalResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSetBudgetProposalResponse.Merge(m, src)
}
func (m *MsgSetBudgetProposalResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgSetBudgetProposalResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSetBudgetProposalResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSetBudgetProposalResponse proto.InternalMessageInfo

type ClaimFunds struct {
	RecipientAddress string      `protobuf:"bytes,1,opt,name=recipient_address,json=recipientAddress,proto3" json:"recipient_address,omitempty"`
	Amount           *types.Coin `protobuf:"bytes,2,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (m *ClaimFunds) Reset()         { *m = ClaimFunds{} }
func (m *ClaimFunds) String() string { return proto.CompactTextString(m) }
func (*ClaimFunds) ProtoMessage()    {}
func (*ClaimFunds) Descriptor() ([]byte, []int) {
	return fileDescriptor_2414eab590ecb8a3, []int{2}
}
func (m *ClaimFunds) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClaimFunds) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ClaimFunds.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ClaimFunds) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClaimFunds.Merge(m, src)
}
func (m *ClaimFunds) XXX_Size() int {
	return m.Size()
}
func (m *ClaimFunds) XXX_DiscardUnknown() {
	xxx_messageInfo_ClaimFunds.DiscardUnknown(m)
}

var xxx_messageInfo_ClaimFunds proto.InternalMessageInfo

func (m *ClaimFunds) GetRecipientAddress() string {
	if m != nil {
		return m.RecipientAddress
	}
	return ""
}

func (m *ClaimFunds) GetAmount() *types.Coin {
	if m != nil {
		return m.Amount
	}
	return nil
}

func init() {
	proto.RegisterType((*MsgSetBudgetProposal)(nil), "cosmos.protocolpool.v1.MsgSetBudgetProposal")
	proto.RegisterType((*MsgSetBudgetProposalResponse)(nil), "cosmos.protocolpool.v1.MsgSetBudgetProposalResponse")
	proto.RegisterType((*ClaimFunds)(nil), "cosmos.protocolpool.v1.ClaimFunds")
}

func init() {
	proto.RegisterFile("cosmos/protocolpool/v1/budget.proto", fileDescriptor_2414eab590ecb8a3)
}

var fileDescriptor_2414eab590ecb8a3 = []byte{
	// 371 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x92, 0xb1, 0x4f, 0xe3, 0x30,
	0x14, 0xc6, 0xeb, 0xf6, 0xae, 0x52, 0xdd, 0x1b, 0xae, 0x51, 0x55, 0xa5, 0xd5, 0x9d, 0xd5, 0xeb,
	0x2d, 0x5d, 0x9a, 0x28, 0x30, 0xc2, 0x42, 0x2b, 0xd8, 0x90, 0x50, 0xda, 0x89, 0x25, 0x72, 0x12,
	0x2b, 0x58, 0x24, 0x7e, 0x91, 0xed, 0x56, 0x30, 0xb2, 0x30, 0xf3, 0xc7, 0xf0, 0x47, 0x30, 0x56,
	0x4c, 0x8c, 0xa8, 0xfd, 0x47, 0x10, 0x8e, 0x55, 0x15, 0x89, 0x81, 0x81, 0xf1, 0x7d, 0xdf, 0xef,
	0x7b, 0x79, 0xf9, 0x64, 0xfc, 0x3f, 0x01, 0x55, 0x80, 0xf2, 0x4b, 0x09, 0x1a, 0x12, 0xc8, 0x4b,
	0x80, 0xdc, 0x5f, 0x05, 0x7e, 0xbc, 0x4c, 0x33, 0xa6, 0x3d, 0x23, 0x3b, 0xbd, 0x0a, 0xf2, 0xf6,
	0x21, 0x6f, 0x15, 0x0c, 0x88, 0x0d, 0xc7, 0x54, 0x31, 0x7f, 0x15, 0xc4, 0x4c, 0xd3, 0xc0, 0x4f,
	0x80, 0x8b, 0x8a, 0x1c, 0xf4, 0x2b, 0x3f, 0x32, 0x93, 0xbf, 0xbf, 0x64, 0x74, 0x57, 0xc7, 0xdd,
	0x73, 0x95, 0xcd, 0x99, 0x9e, 0x9a, 0x2f, 0x5d, 0x48, 0x28, 0x41, 0xd1, 0xdc, 0x39, 0xc5, 0x1d,
	0xc9, 0x12, 0x5e, 0x72, 0x26, 0x74, 0x44, 0xd3, 0x54, 0x32, 0xa5, 0x5c, 0x34, 0x44, 0xe3, 0xd6,
	0xd4, 0x7d, 0x7e, 0x9c, 0x74, 0xed, 0x96, 0x93, 0xca, 0x99, 0x6b, 0xc9, 0x45, 0x16, 0xfe, 0xde,
	0x45, 0xac, 0xee, 0x1c, 0xe3, 0x5f, 0x1a, 0x34, 0xcd, 0xa3, 0xea, 0x47, 0xdc, 0xfa, 0x10, 0x8d,
	0xdb, 0x07, 0x7d, 0xcf, 0xc6, 0xdf, 0x2f, 0xf6, 0xec, 0xc5, 0xde, 0x0c, 0xb8, 0x08, 0xdb, 0x06,
	0xaf, 0x8e, 0x71, 0xfe, 0x62, 0xac, 0x34, 0x95, 0x3a, 0xd2, 0xbc, 0x60, 0x6e, 0x63, 0x88, 0xc6,
	0x8d, 0xb0, 0x65, 0x94, 0x05, 0x2f, 0x98, 0x33, 0xc1, 0x8e, 0x64, 0x05, 0xe5, 0x82, 0x8b, 0x2c,
	0xd2, 0x92, 0x8a, 0xe4, 0x8a, 0x29, 0xf7, 0x87, 0xc1, 0x3a, 0x3b, 0x67, 0x61, 0x0d, 0xa7, 0x87,
	0x9b, 0x25, 0x93, 0x1c, 0x52, 0xf7, 0xa7, 0x41, 0xec, 0x34, 0x22, 0xf8, 0xcf, 0x67, 0x15, 0x84,
	0x4c, 0x95, 0x20, 0x14, 0x1b, 0xdd, 0x23, 0x8c, 0x67, 0x39, 0xe5, 0xc5, 0xd9, 0x52, 0xa4, 0xea,
	0xbb, 0x9a, 0x09, 0x70, 0x93, 0x16, 0xb0, 0x14, 0x5f, 0xe8, 0xc4, 0x82, 0xd3, 0xa3, 0xa7, 0x0d,
	0x41, 0xeb, 0x0d, 0x41, 0xaf, 0x1b, 0x82, 0x1e, 0xb6, 0xa4, 0xb6, 0xde, 0x92, 0xda, 0xcb, 0x96,
	0xd4, 0x2e, 0xff, 0x55, 0x59, 0x95, 0x5e, 0x7b, 0x1c, 0xfc, 0x9b, 0x8f, 0xcf, 0x48, 0xdf, 0x96,
	0x4c, 0xc5, 0x4d, 0xa3, 0x1d, 0xbe, 0x05, 0x00, 0x00, 0xff, 0xff, 0x96, 0x25, 0x71, 0xfe, 0x6a,
	0x02, 0x00, 0x00,
}

func (m *MsgSetBudgetProposal) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSetBudgetProposal) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSetBudgetProposal) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Period != 0 {
		i = encodeVarintBudget(dAtA, i, uint64(m.Period))
		i--
		dAtA[i] = 0x28
	}
	if m.RemainingTranches != 0 {
		i = encodeVarintBudget(dAtA, i, uint64(m.RemainingTranches))
		i--
		dAtA[i] = 0x20
	}
	if m.StartTime != 0 {
		i = encodeVarintBudget(dAtA, i, uint64(m.StartTime))
		i--
		dAtA[i] = 0x18
	}
	if m.TotalBudget != nil {
		{
			size, err := m.TotalBudget.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBudget(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.RecipientAddress) > 0 {
		i -= len(m.RecipientAddress)
		copy(dAtA[i:], m.RecipientAddress)
		i = encodeVarintBudget(dAtA, i, uint64(len(m.RecipientAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgSetBudgetProposalResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSetBudgetProposalResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSetBudgetProposalResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *ClaimFunds) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClaimFunds) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ClaimFunds) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Amount != nil {
		{
			size, err := m.Amount.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBudget(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.RecipientAddress) > 0 {
		i -= len(m.RecipientAddress)
		copy(dAtA[i:], m.RecipientAddress)
		i = encodeVarintBudget(dAtA, i, uint64(len(m.RecipientAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintBudget(dAtA []byte, offset int, v uint64) int {
	offset -= sovBudget(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgSetBudgetProposal) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RecipientAddress)
	if l > 0 {
		n += 1 + l + sovBudget(uint64(l))
	}
	if m.TotalBudget != nil {
		l = m.TotalBudget.Size()
		n += 1 + l + sovBudget(uint64(l))
	}
	if m.StartTime != 0 {
		n += 1 + sovBudget(uint64(m.StartTime))
	}
	if m.RemainingTranches != 0 {
		n += 1 + sovBudget(uint64(m.RemainingTranches))
	}
	if m.Period != 0 {
		n += 1 + sovBudget(uint64(m.Period))
	}
	return n
}

func (m *MsgSetBudgetProposalResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *ClaimFunds) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RecipientAddress)
	if l > 0 {
		n += 1 + l + sovBudget(uint64(l))
	}
	if m.Amount != nil {
		l = m.Amount.Size()
		n += 1 + l + sovBudget(uint64(l))
	}
	return n
}

func sovBudget(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozBudget(x uint64) (n int) {
	return sovBudget(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgSetBudgetProposal) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBudget
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSetBudgetProposal: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSetBudgetProposal: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecipientAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBudget
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBudget
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBudget
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RecipientAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalBudget", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBudget
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBudget
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBudget
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TotalBudget == nil {
				m.TotalBudget = &types.Coin{}
			}
			if err := m.TotalBudget.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			m.StartTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBudget
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RemainingTranches", wireType)
			}
			m.RemainingTranches = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBudget
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RemainingTranches |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Period", wireType)
			}
			m.Period = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBudget
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Period |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBudget(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBudget
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSetBudgetProposalResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBudget
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSetBudgetProposalResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSetBudgetProposalResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipBudget(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBudget
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClaimFunds) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBudget
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClaimFunds: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClaimFunds: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecipientAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBudget
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBudget
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBudget
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RecipientAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBudget
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBudget
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBudget
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Amount == nil {
				m.Amount = &types.Coin{}
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBudget(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBudget
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipBudget(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowBudget
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBudget
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBudget
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthBudget
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupBudget
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthBudget
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthBudget        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowBudget          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupBudget = fmt.Errorf("proto: unexpected end of group")
)
